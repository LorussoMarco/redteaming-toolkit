from flask import Blueprint, request, jsonify, current_app
from backend.modules.utils.logger import get_module_logger
from backend.modules.exploitation import metasploit

logger = get_module_logger('exploitation')
exploit_bp = Blueprint('exploitation', __name__, url_prefix='/api/exploitation')

@exploit_bp.route('/metasploit/payload', methods=['POST'])
def generate_metasploit_payload():
    """Genera un payload usando msfvenom"""
    data = request.json
    payload_type = data.get('payload')
    options = data.get('options', {})
    
    try:
        logger.info(f"Generating payload: {payload_type} with options: {options}")
        result = metasploit.generate_payload(payload_type, options)
        
        if result.get('status') == 'error':
            logger.error(f"Error in payload generation: {result.get('message')}")
            return jsonify(result), 400
                
        return jsonify(result)
    except Exception as e:
        logger.error(f"Error generating payload: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@exploit_bp.route('/payloads', methods=['GET'])
def get_available_payloads():
    """Restituisce i payload disponibili in msfvenom"""
    try:
        payloads = metasploit.get_available_payloads()
        return jsonify({'status': 'success', 'payloads': payloads})
    except Exception as e:
        logger.error(f"Error fetching available payloads: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@exploit_bp.route('/encoders', methods=['GET'])
def get_available_encoders():
    """Restituisce gli encoder disponibili in msfvenom"""
    try:
        encoders = metasploit.get_available_encoders()
        return jsonify({'status': 'success', 'encoders': encoders})
    except Exception as e:
        logger.error(f"Error fetching available encoders: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@exploit_bp.route('/formats', methods=['GET'])
def get_available_formats():
    """Restituisce i formati di output disponibili in msfvenom"""
    try:
        formats = metasploit.get_available_formats()
        return jsonify({'status': 'success', 'formats': formats})
    except Exception as e:
        logger.error(f"Error fetching available formats: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500